arrow left, arrow right	Move one character to the left or right, respectively.
Ctrl+Arrow Left	Move one word to the left.
Ctrl+Arrow Right	Move one word to the right.
Shift+Arrow Left	Select or cancel selection one character to the left.
Shift+Arrow Right	Select or cancel selection one character to the right.
Ctrl+Shift+Arrow Left	Select or cancel selection one word to the left.
Ctrl+Shift+Arrow Right	Select or cancel selection one word to the right.
Shift+Home	Select from the cursor to the beginning of the entry.
Shift+End	Select from the cursor to the end of the entry.
▲ up
minus11. Work with the Selection pane.
F6	Cycle the focus through the different panes.
Shift+F10	Display the context menu.
Arrow Up/Arrow Down	Move the focus to a single item or group.
Arrow Left	Move the focus from an item in a group to its parent group.
Arrow Right	Move the focus from a group to the first item in that group.
* (on numeric keypad only)	Expand a focused group and all its child groups.
[+ (on numeric keypad only)	Expand a focused group.
- (on numeric keypad only)	Collapse a focused group.
Shift+Arrow Up/Shift+Arrow Down	Move the focus to an item and select it.
Space/Enter	Select a focused item.
Shift+Space/Shift+Enter	Cancel selection of a focused item.
Ctrl+Shift+F	Move a selected item forward.
Ctrl+Shift+B	Move a selected item backward.
Ctrl+Shift+S	Show or hide a focused item.
F2	Rename a focused item.
Tab/Shift+Tab	Switch the keyboard focus within the Selection pane between tree view and the Show All and Hide All buttons.
Alt+Shift+1	Collapse all groups.
Alt+Shift+9	Expand all groups.
▲ up
minus12. Others
ctrl+shift+d	Duplicates active slide
skip()
skip()
skip()
skip()
skip()
skip()
bye()
swirl()
sys.date()
skip()
mean(c(2,4,5))
submit()
skip()
skip()
submit
submit()
sum()
submit()
skip()
submit()
skip()
submit()
skip()
skip()
skip()
skip()
skip()
submit()
skip()
evaluate(function(x){x+1}, 6)
skip()
skip()
skip()
skip()
SUBMIT()
submit()
skip()
submit()
skip()
skip()
skip()
skip()
skip()
submit()
submit()
submit()
skip()
submit()
submit()
submit()
skip()
skip()
skip()
viewinfo(flags)
viewinfo("flags")
classs(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list);
skip()
class(cls_vect)
sum(flags$orange)
skip()
skip()
skip()
lapply(flag_colors, sum)
sapply(flag_colors, sum)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
unique_vals
skip()
skip()
skip()
swirl()
library(swirl)
swirl()
skip()
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,
class, character(1)).
vapply(flags,
+         class, character(1))
skip()
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red,
summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,19)
head(plants, 10)
using tail(plants, 15)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
？?sample
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100, replacement=TRUE, prob=c(03,0.7))
SKIP()
SKIP()
flips<-sample(c(0,1),100, replacement=TRUE, prob=c(03,0.7))
flips<-sample(c(0,1),100, replacement = TRUE, prob=c(03,0.7))
flips<-sample(c(0,1),100, replace = TRUE, prob=c(03,0.7))
flips <- sample(c(0,1),
100, replace = TRUE, prob = c(0.3, 0.7))
FLIPS
flipa
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
rbinom(n=100, size = 1, prob = 0.7)
rbinom(n = 100, size = 1, prob = 0.7)
skip()
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(5, mean=10)
skip()
skip()
skip()
skip()
hist(cm)
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
skip()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
skip()
skip()
skip()
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
t1<-difftime(Sys.time(), t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
bye()
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
data(mtcars)
?boxplot
skip()
skip()
paste(LETTERS, 1:4, sep = "-")
library()
library(swirl)
rm(list=ls())
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent,galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child~parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef[1]
skip()
skip()
all.equal(lhs,rhs)
skip()
skip()
skip()
skip()
efit <- lm(accel ~ mag+dist, attenu)
skip()
cov(efit$residuals,attenu$mag)
skip()
skip()
skip()
rm(list=ls())
library(UsingR)
library("UsingR")
install.packages("UsingR")
library(UsingR)
data(galton)
summary(galton)
head(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue", breaks=100)
?par
?mfrow
??mfrow
?hist
?lines
meanChild<-mean(galton$child)
lines(rep(meanChild,100), seq(0,150, length=100), col="red", lwd=5)
rep(meanChild,100)
?rbind
mydata<-data.frame(age=numeric(0), gender=character(0), weight=numeric(0))
mydata<-edit(mydata)
mydata<-data.frame(age=numeric(0), gender=character(0), weight=numeric(0))
mydata<- edit(mydata)
?predict
?exp
?dir.create
demo()
options()
library()
help.start()
install.packages("vcd")
help(package="vcd")
?cut
library(mtcars)
library("mtcars")
mtcars
q()
install.packages("rmarkdown")
getwd()
library(ggplot2)
set.seed(25082502)
lambda <- 0.2 ## Set lambda as per instructions
nexp <- 40 ## number of distributions
nsim <- 1000 ## number of simulations
mns <- NULL  ## set msn to null
for (i in 1 : nsim) mns <- c(mns, mean(rexp(40,lambda)))
hist(mns,col="blue",main="Distribution of Means of rexp")
varxp <- ((1/lambda)^2)/nexp
varmean <- var(mns)
varxp
varmean
library(ggplot2)
set.seed(123)
lambda <- 0.2
nexp <- 40
nsim <- 1000
mns <- NULL
for (i in 1 : nsim) mns <- c(mns, mean(rexp(40,lambda)))
hist(mns,col="blue",main="Distribution of Means of rexp")
varxp <- ((1/lambda)^2)/nexp
varmean <- var(mns)
varxp
varmean
varxp <- ((1/lambda)^2)/nexp
varmean <- var(mns)
varxp-varmean
head(mns)
plotdata <- data.frame(mns)
plot1 <- ggplot(plotdata,aes(x = mns)) +geom_histogram(aes(y=..density..), colour="black",fill="green")+labs(title="Distribution of Means of rexp", y="Density") +stat_function(fun=dnorm,args=list( mean=1/lambda, sd=sqrt(varxp)),color = "red", size = 1.0) +stat_function(fun=dnorm,args=list( mean=mean(mns), sd=sqrt(varmean)),color = "black", size = 1.0)
print(plot1)
library(datasets)
data(ToothGrowth)
head(ToothGrowth)
str(ToothGrowth)
plot1 <- ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=supp)) +
geom_bar(aes(fill=dose),stat="identity") +
facet_grid(scales="free", space="free", .~supp) +
guides(fill=FALSE) + theme_bw() +
labs(x="dose", y=expression("Len")) +
labs(title="Summary")
plot1
plot2 <- ggplot(ToothGrowth,
aes(x=factor(dose),y=len,fill=factor(dose)))+ geom_boxplot(notch=F) + facet_grid(.~supp) +
scale_x_discrete("Dosage (Milligram)") +
scale_y_continuous("Length of Teeth") +
ggtitle("Effect of Dosage and Supplement Type on Tooth Growth")
plot2
summary(ToothGrowth)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
table(ToothGrowth$supp, ToothGrowth$dose)
supp.t1 <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
supp.t2 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
supp.result <- data.frame("p-value"=c(supp.t1$p.value, supp.t2$p.value),
"Conf-Low"=c(supp.t1$conf[1],supp.t2$conf[1]),
"Conf-High"=c(supp.t1$conf[2],supp.t2$conf[2]),
row.names=c("Equal Var","Unequal Var"))
supp.result
plot1 <- ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=supp)) +
geom_bar(aes(fill=dose),stat="identity") +
facet_grid(scales="free", space="free", .~supp) +
guides(fill=FALSE) + theme_bw() +
labs(x="dose", y=expression("Len")) +
labs(title="Summary")
supp.t1$conf[1]
supp.t1
supp.t2
t.test(len ~ supp, data = ToothGrowth)
Tooth.dose0.5_1.0 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
Tooth.dose0.5_2.0 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
Tooth.dose1.0_2.0 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
t.test(len ~ dose, data = Tooth.dose0.5_1.0)
Tooth.dose0.5 <- subset(ToothGrowth, dose == 0.5)
Tooth.dose1.0 <- subset(ToothGrowth, dose == 1.0)
Tooth.dose2.0 <- subset(ToothGrowth, dose == 2.0)
t.test(len ~ supp, data = Tooth.dose0.5)
t.test(len ~ supp, data = Tooth.dose1.0)
t.test(len ~ supp, data = Tooth.dose2.0)
Tooth.dose0.5 <- subset(ToothGrowth, dose == 0.5)
Tooth.dose1.0 <- subset(ToothGrowth, dose == 1.0)
Tooth.dose2.0 <- subset(ToothGrowth, dose == 2.0)
t.test(len ~ supp, data = Tooth.dose0.5)
t.test(len ~ supp, data = Tooth.dose1.0)
t.test(len ~ supp, data = Tooth.dose2.0)
t.test(len ~ supp, data = Tooth.dose0.5)
t.test(len ~ supp, data = Tooth.dose1.0)
t.test(len ~ supp, data = Tooth.dose2.0)
Tooth.dose0.5_1.0 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
Tooth.dose0.5_2.0 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
Tooth.dose1.0_2.0 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
t.test(len ~ dose, data = Tooth.dose0.5_1.0)
t.test(len ~ dose, data = Tooth.dose0.5_2.0)
t.test(len ~ dose, data = Tooth.dose1.0_2.0)
t.test(len ~ supp, data = ToothGrowth)
plotdata <- data.frame(mns)
plot <- ggplot(plotdata,aes(x = mns)) +geom_histogram(aes(y=..density..), colour="black",fill="green")+labs(title="Distribution of Means", y="Density") +stat_function(fun=dnorm,args=list( mean=1/lambda, sd=sqrt(varxp)),color = "red", size = 1.0) +stat_function(fun=dnorm,args=list( mean=mean(mns), sd=sqrt(varmean)),color = "black", size = 1.0)
print(plot)
means$x
mean(rexp(40,lambda))
library(datasets)
data(mtcars)
summary(mtcars)
?mtcars
str(mtcars)
head(mtcars)
pairs(mtcars)
par(mfrow=c(2,1))
hist(mtcars$mpg, breaks=10, xlab="MPG", main="MPG histogram")
plot(density(mtcars$mpg), main="kernel density", xlab="MPG")
pairs(mtcars)
t.test(mpg~am,mtcars,paired=FALSE,var.equal=FALSE)
boxplot(mtcars$mpg~as.factor(mtcars$am),col="blue",ylab="mpg",xlab="am",main="MPG vs AM")
par(mfrow=c(1,1))
boxplot(mtcars$mpg~as.factor(mtcars$am),col="blue",ylab="mpg",xlab="am",main="MPG vs AM")
plot(cars)
basic<-lm(mpg~am,mtcars)
summary(basic)
full<-lm(mpg~.,mtcars)
summary(full)
fit<-step(full, direction="backward")
summary(fit)
anova(basic, fit)
par(mfrow=c(2, 2))
plot(fit)
t.test(mpg~am,mtcars,paired=FALSE,var.equal=FALSE)
basic<-lm(mpg~am,mtcars)
summary(basic)
full<-lm(mpg~.,mtcars)
summary(full)
fit<-step(full, direction="backward")
summary(fit)
anova(basic, fit)
par(mfrow=c(2, 2))
plot(fit)
summary(full)
summary(fit)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
basic<-lm(mpg~am,mtcars)
summary(basic)
fit<-step(full, direction="backward")
summary(fit)
str(mtcars)
boxplot(mtcars$mpg~as.factor(mtcars$am),col="blue",ylab="mpg",xlab="am",main="MPG & AM")
basic<-lm(mpg~am,mtcars)
summary(basic)
full<-lm(mpg~.,mtcars)
fit<-step(full, direction="backward")
summary(fit)
full<-lm(mpg~.,mtcars)
fit<-step(full, direction="backward")
full<-lm(mpg~.,mtcars)
fit<-step(full, direction="backward")
summary(fit)
fitmodel<-step(full, direction="backward")
summary(fitmodel)
par(mfrow=c(2, 2))
plot(fit)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
library(manipulate)
myHist<-function(mu){
g<-ggplot(galton, aes(x=child)+geom_histogram(fill="salmon", binwidth=1, aes(y=..density..), colour="black"))
g<-g+geom_density(size=2)+geom_vline(xintercept=mu, size=2)
mse<-round(mean((galton$child=mu)^2), 3)
g<-g+labs(title="test")
g
}
manipulate(myHist(mu), mu=slider(62, 74, step=0.5))
load(ggplot2)
library(ggplot2)
manipulate(myHist(mu), mu=slider(62, 74, step=0.5))
plot(x,y)
y<-c(1,1)
plot(x,y)
x<-c(0,1)
y<-c(1,1)
plot(x,y)
library(swirl)
ls()
rm(list=ls())
swirl()
qbeta(0.5, 2, 1)
qnorm(.95, mean=mu, sd=sd)
qnorm(.95, mean= mu, sd= sd)
pnorm(1160, mean= 1020, sd=50, lower.tail=FALSE)
qnorm(.75, mean=1020, sd=50)
ppois(3, lambda= 2.5*4)
pbimom(2, size=500, prob=0.01)
pbinom(2, size=500, prob=0.01)
ppois(2, lambda=500*0.01)
?cumsum
library(slidify)
setwd("/Users/liujiayu/Desktop/coursera_data science/Develop Data Products")
author("first_deck")
slidify("index.Rmd")
pulish_github("jiayuliu", "Developing-Data-Products")
publish('first_deck', 'index.html', host='rpubs')
publish('first_deck', 'index.html', host='rpubs')
slidify(index.Rmd)
install.packages('stringr')
install.packages("stringr")
pulish_github("jiayuliu", "Developing-Data-Products")
